CREATE TABLE Disciplina (
    cod_disciplina int PRIMARY KEY AUTO_INCREMENT,
    nome varchar(50),
    cod_prof int REFERENCES Professor (cod_prof),
	cod_curso int REFERENCES Curso (cod_curso)
);

CREATE TABLE Professor (
	cod_prof int PRIMARY KEY AUTO_INCREMENT,
    cpf varchar(15),
    data_admissao date,
    nome varchar(50),
    email_institucional varchar(50)
);

CREATE TABLE Aula (
	cod_aula int PRIMARY KEY AUTO_INCREMENT,
    horario time,
    cod_disciplina int REFERENCES Disciplina (cod_disciplina),
    cod_turma int REFERENCES Turma (cod_turma),
    dia_semana int
    
);

CREATE TABLE Turma (
	cod_turma int PRIMARY KEY AUTO_INCREMENT,
    semestre smallint(2),
    periodo varchar(6),
    ano smallint(4),
	cod_curso int REFERENCES Curso (cod_curso)
);

CREATE TABLE Aluno (
	cod_aluno int PRIMARY KEY AUTO_INCREMENT,
    cod_turma int REFERENCES Turma (cod_turma),
    nome varchar(50),
    data_matricula date,
    data_nascimento date
);

CREATE TABLE Curso (
	cod_curso int PRIMARY KEY AUTO_INCREMENT,
	nome varchar(50),
	eixo_tecnologico varchar(50)
);

CREATE VIEW AulasPorDia AS
SELECT 
    CASE dia_semana 
        WHEN 1 THEN 'Segunda-feira'
        WHEN 2 THEN 'Terça-feira'
        WHEN 3 THEN 'Quarta-feira'
        WHEN 4 THEN 'Quinta-feira'
        WHEN 5 THEN 'Sexta-feira'
        WHEN 6 THEN 'Sábado'
        WHEN 7 THEN 'Domingo'
    END AS DiaSemana,
    cod_aula AS Aula,
    horario AS Inicio,
    cod_turma AS Turma,
    (SELECT p.nome FROM Professor p INNER JOIN Disciplina d ON d.cod_prof = p.cod_prof WHERE a.cod_disciplina = d.cod_disciplina) AS Professor,
    ADDTIME(horario, '00:50:00') AS Termino -- Exemplo de cálculo do término da aula com 50 minutos de duração
FROM Aula a;

DELIMITER //

CREATE TRIGGER VerificarUltimaAulaNoturna
BEFORE INSERT ON Aula
FOR EACH ROW
BEGIN
    DECLARE diaAnterior INT;
    DECLARE professorUltimaAula INT;
    
    -- Calcular o dia anterior
    SET diaAnterior = IF(NEW.dia_semana = 1, 7, NEW.dia_semana - 1);

    -- Verificar se o professor lecionou na última aula do dia anterior (22:30)
    SELECT d.cod_prof INTO professorUltimaAula
    FROM Aula a
    INNER JOIN Disciplina d ON a.cod_disciplina = d.cod_disciplina
    WHERE a.dia_semana = diaAnterior AND a.horario = '22:30:00' AND d.cod_prof = (SELECT cod_prof FROM Disciplina WHERE cod_disciplina = NEW.cod_disciplina)
    LIMIT 1;

    -- Impedir que o professor lecione nas duas primeiras aulas do dia seguinte
    IF professorUltimaAula IS NOT NULL AND NEW.horario IN ('07:15:00', '08:05:00') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'O professor lecionou na última aula noturna e não pode ser alocado nas primeiras duas aulas do dia seguinte.';
    END IF;
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER VerificarConflitoHorario
BEFORE INSERT ON Aula
FOR EACH ROW
BEGIN
    DECLARE qtdConflitos INT;
    
    -- Verificar se o professor está escalado em mais de uma disciplina no mesmo dia e horário
    SELECT COUNT(*) INTO qtdConflitos
    FROM Aula a
    INNER JOIN Disciplina d ON a.cod_disciplina = d.cod_disciplina
    WHERE d.cod_prof = (SELECT cod_prof FROM Disciplina WHERE cod_disciplina = NEW.cod_disciplina)
    AND a.dia_semana = NEW.dia_semana
    AND a.horario = NEW.horario;

    -- Gatilho de alerta em caso de conflito
    IF qtdConflitos > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Conflito detectado: o professor já está alocado em outra disciplina no mesmo dia e horário.';
    END IF;
END //

DELIMITER ;
